name: Weekly Build and Release Nezha
on:
  schedule:
    - cron: '0 2 * * 0' # Runs at 02:00 UTC on Sunday
  workflow_dispatch: {}

permissions:
  contents: write

env:
  NEZHA_VERSION: '0.17.9' # <-- 在这里设置固定的程序内置版本

jobs:
  setup:
    name: Determine Release Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Generate release tag
        id: version
        # 这个步骤生成的是发布用的标签，不是程序版本
        run: echo "version=v$(date +%Y%m%d)-${{ github.run_id }}" >> $GITHUB_OUTPUT

  build-freebsd:
    name: Build FreeBSD
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup and Build on FreeBSD
        uses: vmactions/freebsd-vm@v1
        with:
          usesh: true
          release: '14.2'
          prepare: |
            pkg update
            pkg install -y wget curl git gcc bash jq node zip
            fetch https://go.dev/dl/go1.22.0.freebsd-amd64.tar.gz
            tar -C /usr/local -xzf go1.22.0.freebsd-amd64.tar.gz
          run: |
            export PATH=$PATH:/usr/local/go/bin
            export GOPATH=$HOME/go
            # 使用 env 中定义的固定版本号来构建程序
            version_num=${{ env.NEZHA_VERSION }}
            cd cmd/dashboard
            go mod tidy
            if find ../../ -name "*.go" -exec grep -l "singleton.Version" {} \; | head -1 > /dev/null 2>&1; then VERSION_FLAG="-X github.com/naiba/nezha/service/singleton.Version=${version_num}"; else VERSION_FLAG="-X main.version=${version_num}"; fi
            go build -ldflags "-s -w $VERSION_FLAG -extldflags '-static -fpic'" -trimpath -buildvcs=false || go build -ldflags "-s -w $VERSION_FLAG" -trimpath -buildvcs=false

            echo "==================== preparing output ========================"
            mkdir -p ../../output
            mv dashboard ../../output/nezha-dashboard-freebsd-amd64

      - name: Upload FreeBSD Binary
        uses: actions/upload-artifact@v4
        with:
          name: nezha-freebsd-amd64-binary
          path: output/nezha-dashboard-freebsd-amd64

  build-linux:
    name: Build Linux
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: '1.22.0'
      - name: Build Application
        run: |
          # 使用 env 中定义的固定版本号来构建程序
          version_num=${{ env.NEZHA_VERSION }}
          cd cmd/dashboard
          go mod tidy
          export GOOS=linux
          export GOARCH=${{ matrix.arch }}
          export CGO_ENABLED=0
          if grep -q "singleton.Version" ../../service/singleton/*.go 2>/dev/null; then go build -ldflags "-s -w -X github.com/naiba/nezha/service/singleton.Version=${version_num}" -trimpath -buildvcs=false; else go build -ldflags "-s -w -X main.version=${version_num}" -trimpath -buildvcs=false; fi

          mkdir -p ../../output
          mv dashboard ../../output/nezha-dashboard-linux-${{ matrix.arch }}

      - name: Upload Linux Binary
        uses: actions/upload-artifact@v4
        with:
          name: nezha-linux-${{ matrix.arch }}-binary
          path: output/nezha-dashboard-linux-${{ matrix.arch }}

  build-ibm-s390x:
    name: Build IBM s390x
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: '1.22.0'
      - name: Build for IBM s390x
        run: |
          # 使用 env 中定义的固定版本号来构建程序
          version_num=${{ env.NEZHA_VERSION }}
          cd cmd/dashboard
          go mod tidy
          export GOOS=linux
          export GOARCH=s390x
          export CGO_ENABLED=0
          if grep -q "singleton.Version" ../../service/singleton/*.go 2>/dev/null; then go build -ldflags "-s -w -X github.com/naiba/nezha/service/singleton.Version=${version_num}" -trimpath -buildvcs=false; else go build -ldflags "-s -w -X main.version=${version_num}" -trimpath -buildvcs=false; fi

          mkdir -p ../../output
          mv dashboard ../../output/nezha-dashboard-linux-s390x

      - name: Upload IBM s390x Binary
        uses: actions/upload-artifact@v4
        with:
          name: nezha-linux-s390x-binary
          path: output/nezha-dashboard-linux-s390x

  release:
    name: Create Release
    needs: [setup, build-freebsd, build-linux, build-ibm-s390x]
    runs-on: ubuntu-latest
    steps:
      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          cp -v artifacts/*/* release-assets/
          echo "Assets to be released:"
          ls -l release-assets/

      - name: Create Release with Binaries
        uses: ncipollo/release-action@v1
        with:
          # Release 的标签使用 setup 任务生成的日期标签
          tag: ${{ needs.setup.outputs.version }}
          artifacts: "release-assets/*"
          generateReleaseNotes: true
          allowUpdates: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
