name: Build and Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v0.17.5'

jobs:
  # FreeBSD Build (原有的)
  build-freebsd:
    name: Build FreeBSD
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup and Build on FreeBSD
        uses: vmactions/freebsd-vm@v1
        with:
          usesh: true
          release: 14.1
          prepare: |
            pkg install -y wget curl git gcc bash jq node zip
            fetch https://go.dev/dl/go1.22.0.freebsd-amd64.tar.gz
            rm -rf /usr/local/go
            tar -C /usr/local -xzf go1.22.0.freebsd-amd64.tar.gz
            export PATH=$PATH:/usr/local/go/bin
            curl -sL https://github.com/mikefarah/yq/releases/latest/download/yq_freebsd_amd64 -o /usr/local/bin/yq
            chmod +x /usr/local/bin/yq
            yq --version
          run: |
            echo "==================== 1 get nezha version ========================"
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              VERSION=${{ github.event.inputs.tag }}
            else
              VERSION=$(curl -sL "https://api.github.com/repos/naiba/nezha/releases/latest" | jq -r .tag_name)
            fi

            if [ -z "${VERSION}" ]; then
              echo "Error: VERSION could not be determined" >&2
              exit 1
            fi

            echo "VERSION=${VERSION}" >> $GITHUB_ENV
            echo "Version set to: ${VERSION}"

            version_num=${VERSION#v}
            echo "==================== 2 download nezha git ========================"
            if git ls-remote --tags https://github.com/naiba/nezha | grep -q "refs/tags/${VERSION}"; then
              git clone -b ${VERSION} https://github.com/naiba/nezha
            else
              echo "Error: Tag ${VERSION} not found in naiba/nezha repository" && exit 1
            fi
            
            rm -rf nezha/cmd/dashboard/*-dist
            
            echo "==================== 3 fetch front module ========================"
            cd nezha
            chmod +x ./script/fetch-frontends.sh && bash ./script/fetch-frontends.sh
            cd ../
            
            rm -rf nezha/pkg/geoip/geoip.db
            wget -qO nezha/pkg/geoip/geoip.db https://ipinfo.io/data/free/country.mmdb?token=${{ secrets.IPINFO_TOKEN }}
            
            echo "==================== 4 Install Swag for Swagger docs ========================"
            go install github.com/swaggo/swag/cmd/swag@latest
            export PATH=$PATH:$(go env GOPATH)/bin
            
            echo "==================== 5 Swag init ========================"
            cd nezha
            $(go env GOPATH)/bin/swag init --pd -d . -g ./cmd/dashboard/main.go -o ./cmd/dashboard/docs --parseGoList=false
            
            cd cmd/dashboard
            echo "==================== 6 go build ========================"
            go mod tidy
            go build -ldflags "-s -w -X github.com/nezhahq/nezha/service/singleton.Version=${version_num} -extldflags '-static -fpic'" -trimpath -buildvcs=false

            echo "==================== 7 check output file ========================"
            file dashboard
            
            echo "==================== 8 output archive ========================"
            mkdir -p ../../output
            mv dashboard ../../output/nezha-dashboard-freebsd-amd64

            mkdir -p ../../output/data
            wget -qO ../../output/data/config.yaml "https://raw.githubusercontent.com/nezhahq/scripts/main/extras/config.yaml"

            cd ../../output
            zip -qr nezha-dashboard-freebsd-amd64.zip .
            tar -czf nezha-dashboard-freebsd-amd64.tar.gz *

            echo "==================== 9 check output again ========================"
            file nezha-dashboard-freebsd-amd64

      - name: Upload FreeBSD Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nezha-freebsd-amd64
          path: nezha/output/*

  # Linux Builds (AMD64 和 ARM64)
  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.0'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget curl git gcc jq zip

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Get Nezha version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION=${{ github.event.inputs.tag }}
          else
            VERSION=$(curl -sL "https://api.github.com/repos/naiba/nezha/releases/latest" | jq -r .tag_name)
          fi

          if [ -z "${VERSION}" ]; then
            echo "Error: VERSION could not be determined" >&2
            exit 1
          fi

          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version set to: ${VERSION}"

      - name: Clone Nezha
        run: |
          echo "Cloning Nezha repository..."
          if git ls-remote --tags https://github.com/naiba/nezha | grep -q "refs/tags/${{ steps.version.outputs.version }}"; then
            git clone -b ${{ steps.version.outputs.version }} https://github.com/naiba/nezha
          else
            echo "Error: Tag ${{ steps.version.outputs.version }} not found in naiba/nezha repository" && exit 1
          fi
          
          echo "Repository cloned, checking structure..."
          ls -la nezha/
          find nezha/ -name "*fetch*" -type f || echo "No fetch scripts found"

      - name: Setup Cross Compilation for ARM64
        if: matrix.arch == 'arm64'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CGO_ENABLED=1" >> $GITHUB_ENV

      - name: Setup Compilation for AMD64
        if: matrix.arch == 'amd64'
        run: |
          echo "CGO_ENABLED=1" >> $GITHUB_ENV

      - name: Build Application
        run: |
          version_num=${{ steps.version.outputs.version }}
          version_num=${version_num#v}
          echo "Building version: ${version_num}"
          
          # Clean old dist directories
          rm -rf nezha/cmd/dashboard/*-dist
          
          # Fetch frontend dependencies - check if script exists
          cd nezha
          if [ -f "./script/fetch-frontends.sh" ]; then
            echo "Found fetch-frontends.sh, executing..."
            chmod +x ./script/fetch-frontends.sh && bash ./script/fetch-frontends.sh
          elif [ -f "./scripts/fetch-frontends.sh" ]; then
            echo "Found fetch-frontends.sh in scripts/, executing..."
            chmod +x ./scripts/fetch-frontends.sh && bash ./scripts/fetch-frontends.sh
          else
            echo "No fetch-frontends.sh found, checking for other frontend setup methods..."
            # Check if there are already built frontend files
            if [ -d "./cmd/dashboard/dist" ] || [ -d "./web/dist" ]; then
              echo "Found existing frontend dist files"
            else
              echo "Warning: No frontend build script found and no dist files present"
            fi
          fi
          cd ../
          
          # Download GeoIP database - ensure directory exists
          mkdir -p nezha/pkg/geoip
          rm -f nezha/pkg/geoip/geoip.db
          echo "Downloading GeoIP database..."
          wget -qO nezha/pkg/geoip/geoip.db https://ipinfo.io/data/free/country.mmdb?token=${{ secrets.IPINFO_TOKEN }}
          
          # Install Swag
          echo "Installing Swag..."
          go install github.com/swaggo/swag/cmd/swag@latest
          
          # Generate Swagger docs
          echo "Generating Swagger docs..."
          cd nezha
          $(go env GOPATH)/bin/swag init --pd -d . -g ./cmd/dashboard/main.go -o ./cmd/dashboard/docs --parseGoList=false
          
          # Build the project
          cd cmd/dashboard
          echo "Building Go application..."
          go mod tidy
          
          export GOOS=linux
          export GOARCH=${{ matrix.arch }}
          
          go build -ldflags "-s -w -X github.com/nezhahq/nezha/service/singleton.Version=${version_num}" -trimpath -buildvcs=false
          
          # Check output
          file dashboard
          
          # Create output directory and move binary
          mkdir -p ../../output
          mv dashboard ../../output/nezha-dashboard-linux-${{ matrix.arch }}
          
          # Prepare config
          mkdir -p ../../output/data
          wget -qO ../../output/data/config.yaml "https://raw.githubusercontent.com/nezhahq/scripts/main/extras/config.yaml"
          
          # Create archives
          cd ../../output
          zip -qr nezha-dashboard-linux-${{ matrix.arch }}.zip .
          tar -czf nezha-dashboard-linux-${{ matrix.arch }}.tar.gz *

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nezha-linux-${{ matrix.arch }}
          path: nezha/output/*

  # IBM System z Build (s390x)
  build-ibm-s390x:
    name: Build IBM s390x
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.0'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget curl git jq zip

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Get Nezha version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION=${{ github.event.inputs.tag }}
          else
            VERSION=$(curl -sL "https://api.github.com/repos/naiba/nezha/releases/latest" | jq -r .tag_name)
          fi

          if [ -z "${VERSION}" ]; then
            echo "Error: VERSION could not be determined" >&2
            exit 1
          fi

          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version set to: ${VERSION}"

      - name: Clone Nezha
        run: |
          version_num=${{ steps.version.outputs.version }}
          version_num=${version_num#v}
          
          if git ls-remote --tags https://github.com/naiba/nezha | grep -q "refs/tags/${{ steps.version.outputs.version }}"; then
            git clone -b ${{ steps.version.outputs.version }} https://github.com/naiba/nezha
          else
            echo "Error: Tag ${{ steps.version.outputs.version }} not found in naiba/nezha repository" && exit 1
          fi

      - name: Build for IBM s390x
        run: |
          version_num=${{ steps.version.outputs.version }}
          version_num=${version_num#v}
          echo "Building version: ${version_num}"
          
          # Clean old dist directories
          rm -rf nezha/cmd/dashboard/*-dist
          
          # Fetch frontend dependencies - check if script exists
          cd nezha
          if [ -f "./script/fetch-frontends.sh" ]; then
            echo "Found fetch-frontends.sh, executing..."
            chmod +x ./script/fetch-frontends.sh && bash ./script/fetch-frontends.sh
          elif [ -f "./scripts/fetch-frontends.sh" ]; then
            echo "Found fetch-frontends.sh in scripts/, executing..."
            chmod +x ./scripts/fetch-frontends.sh && bash ./scripts/fetch-frontends.sh
          else
            echo "No fetch-frontends.sh found, checking for other frontend setup methods..."
            # Check if there are already built frontend files
            if [ -d "./cmd/dashboard/dist" ] || [ -d "./web/dist" ]; then
              echo "Found existing frontend dist files"
            else
              echo "Warning: No frontend build script found and no dist files present"
            fi
          fi
          cd ../
          
          # Download GeoIP database - ensure directory exists
          mkdir -p nezha/pkg/geoip
          rm -f nezha/pkg/geoip/geoip.db
          echo "Downloading GeoIP database..."
          wget -qO nezha/pkg/geoip/geoip.db https://ipinfo.io/data/free/country.mmdb?token=${{ secrets.IPINFO_TOKEN }}
          
          # Install Swag
          echo "Installing Swag..."
          go install github.com/swaggo/swag/cmd/swag@latest
          
          # Generate Swagger docs
          echo "Generating Swagger docs..."
          cd nezha
          $(go env GOPATH)/bin/swag init --pd -d . -g ./cmd/dashboard/main.go -o ./cmd/dashboard/docs --parseGoList=false
          
          # Build for IBM s390x (System z / LinuxONE)
          cd cmd/dashboard
          echo "Building Go application for s390x..."
          go mod tidy
          
          # IBM Z/LinuxONE 使用 s390x 架构
          export GOOS=linux
          export GOARCH=s390x
          export CGO_ENABLED=0
          
          go build -ldflags "-s -w -X github.com/nezhahq/nezha/service/singleton.Version=${version_num}" -trimpath -buildvcs=false
          
          # Create output directory and move binary
          mkdir -p ../../output
          mv dashboard ../../output/nezha-dashboard-linux-s390x
          
          # Prepare config
          mkdir -p ../../output/data
          wget -qO ../../output/data/config.yaml "https://raw.githubusercontent.com/nezhahq/scripts/main/extras/config.yaml"
          
          # Create archives
          cd ../../output
          zip -qr nezha-dashboard-linux-s390x.zip .
          tar -czf nezha-dashboard-linux-s390x.tar.gz *

      - name: Upload IBM s390x Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nezha-linux-s390x
          path: nezha/output/*

  # Release Job
  release:
    name: Create Release
    needs: [build-freebsd, build-linux, build-ibm-s390x]
    runs-on: ubuntu-latest
    steps:
      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION=${{ github.event.inputs.tag }}
          else
            VERSION=$(curl -sL "https://api.github.com/repos/naiba/nezha/releases/latest" | jq -r .tag_name)
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts/ -name "*.zip" -o -name "*.tar.gz" | while read file; do
            cp "$file" release-assets/
          done
          ls -la release-assets/

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.version.outputs.version }}
          artifacts: "release-assets/*"
          generateReleaseNotes: true
          makeLatest: legacy
          omitBody: false
          omitBodyDuringUpdate: false
          omitDraftDuringUpdate: false
          omitName: false
          omitNameDuringUpdate: false
          omitPrereleaseDuringUpdate: false
          removeArtifacts: false
          replacesArtifacts: true
          skipIfReleaseExists: false
          updateOnlyUnreleased: false
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
